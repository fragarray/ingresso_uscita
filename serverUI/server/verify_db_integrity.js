#!/usr/bin/env node

/**
 * Script di verifica integrit√† database
 * Controlla la correttezza dei record di timbratura dopo operazioni di modifica/eliminazione
 */

const db = require('./db');

console.log('\nüîç VERIFICA INTEGRIT√Ä DATABASE\n');
console.log('=' .repeat(60));

// 1. Verifica coppie IN/OUT
console.log('\nüìä Analisi coppie IN/OUT...\n');

db.all(`
  SELECT 
    employeeId,
    COUNT(*) as total_records,
    SUM(CASE WHEN type = 'in' THEN 1 ELSE 0 END) as total_in,
    SUM(CASE WHEN type = 'out' THEN 1 ELSE 0 END) as total_out
  FROM attendance_records
  GROUP BY employeeId
  ORDER BY employeeId
`, [], (err, rows) => {
  if (err) {
    console.error('‚ùå Errore query:', err.message);
    return;
  }

  console.log('‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê');
  console.log('‚îÇ Dipendente  ‚îÇ Tot. Rec. ‚îÇ Tot. IN ‚îÇ Tot. OUT ‚îÇ  Status  ‚îÇ');
  console.log('‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§');

  let totalWarnings = 0;
  let totalErrors = 0;

  rows.forEach(row => {
    const diff = row.total_in - row.total_out;
    let status = '‚úÖ OK    ';
    
    if (diff > 1) {
      status = '‚ùå ERROR ';
      totalErrors++;
    } else if (diff === 1) {
      status = '‚ö†Ô∏è  IN uso';
      totalWarnings++;
    } else if (diff < 0) {
      status = '‚ùå ERROR ';
      totalErrors++;
    }

    console.log(`‚îÇ ${String(row.employeeId).padEnd(11)} ‚îÇ ${String(row.total_records).padEnd(9)} ‚îÇ ${String(row.total_in).padEnd(7)} ‚îÇ ${String(row.total_out).padEnd(8)} ‚îÇ ${status} ‚îÇ`);
  });

  console.log('‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò');

  console.log(`\nüìà Riepilogo:`);
  console.log(`   ‚úÖ Record validi: ${rows.length - totalWarnings - totalErrors}`);
  console.log(`   ‚ö†Ô∏è  Dipendenti attualmente IN: ${totalWarnings}`);
  console.log(`   ‚ùå Anomalie rilevate: ${totalErrors}`);

  if (totalErrors > 0) {
    console.log('\n‚ö†Ô∏è  ATTENZIONE: Rilevate anomalie nel database!');
    console.log('   Possibili cause:');
    console.log('   - Pi√π IN consecutivi senza OUT');
    console.log('   - Pi√π OUT consecutivi senza IN');
    console.log('   - OUT eliminato manualmente senza IN');
  }

  // 2. Verifica ordine cronologico
  console.log('\n\n‚è∞ Verifica ordine cronologico...\n');

  db.all(`
    SELECT 
      ar1.id as id1,
      ar1.employeeId,
      ar1.type as type1,
      ar1.timestamp as ts1,
      ar2.id as id2,
      ar2.type as type2,
      ar2.timestamp as ts2
    FROM attendance_records ar1
    JOIN attendance_records ar2 
      ON ar1.employeeId = ar2.employeeId 
      AND ar1.id < ar2.id
      AND ar1.type = 'in'
      AND ar2.type = 'out'
    WHERE ar2.timestamp <= ar1.timestamp
    ORDER BY ar1.employeeId, ar1.timestamp
  `, [], (err, chronoErrors) => {
    if (err) {
      console.error('‚ùå Errore query:', err.message);
      return;
    }

    if (chronoErrors.length === 0) {
      console.log('‚úÖ Nessun errore di ordine cronologico rilevato');
    } else {
      console.log(`‚ùå Rilevati ${chronoErrors.length} errori di ordine cronologico:\n`);
      
      chronoErrors.forEach((error, idx) => {
        console.log(`${idx + 1}. Dipendente ${error.employeeId}:`);
        console.log(`   IN  [ID: ${error.id1}] ‚Üí ${error.ts1}`);
        console.log(`   OUT [ID: ${error.id2}] ‚Üí ${error.ts2}`);
        console.log(`   ‚ö†Ô∏è  OUT √® PRIMA di IN!\n`);
      });
    }

    // 3. Verifica record orfani
    console.log('\nüîç Ricerca record orfani...\n');

    db.all(`
      WITH ordered_records AS (
        SELECT 
          id,
          employeeId,
          type,
          timestamp,
          LAG(type) OVER (PARTITION BY employeeId ORDER BY timestamp) as prev_type,
          LEAD(type) OVER (PARTITION BY employeeId ORDER BY timestamp) as next_type
        FROM attendance_records
        ORDER BY employeeId, timestamp
      )
      SELECT * FROM ordered_records
      WHERE 
        (type = 'in' AND prev_type = 'in') OR
        (type = 'out' AND prev_type = 'out') OR
        (type = 'out' AND prev_type IS NULL)
    `, [], (err, orphans) => {
      if (err) {
        console.error('‚ùå Errore query:', err.message);
        return;
      }

      if (orphans.length === 0) {
        console.log('‚úÖ Nessun record orfano rilevato');
      } else {
        console.log(`‚ö†Ô∏è  Rilevati ${orphans.length} record potenzialmente problematici:\n`);
        
        orphans.forEach((orphan, idx) => {
          const issue = orphan.type === 'out' && orphan.prev_type === null 
            ? 'OUT senza IN precedente'
            : `${orphan.type.toUpperCase()} consecutivo (doppio)`;
          
          console.log(`${idx + 1}. [ID: ${orphan.id}] Dipendente ${orphan.employeeId}`);
          console.log(`   Tipo: ${orphan.type.toUpperCase()}`);
          console.log(`   Timestamp: ${orphan.timestamp}`);
          console.log(`   Problema: ${issue}\n`);
        });
      }

      // 4. Statistiche generali
      console.log('\nüìä Statistiche Generali\n');

      db.get(`
        SELECT 
          COUNT(*) as total_records,
          COUNT(DISTINCT employeeId) as total_employees,
          SUM(CASE WHEN type = 'in' THEN 1 ELSE 0 END) as total_in,
          SUM(CASE WHEN type = 'out' THEN 1 ELSE 0 END) as total_out,
          SUM(CASE WHEN isForced = 1 THEN 1 ELSE 0 END) as total_forced
        FROM attendance_records
      `, [], (err, stats) => {
        if (err) {
          console.error('‚ùå Errore query:', err.message);
          return;
        }

        console.log(`   üìù Record totali: ${stats.total_records}`);
        console.log(`   üë• Dipendenti coinvolti: ${stats.total_employees}`);
        console.log(`   ‚û°Ô∏è  Timbrature IN: ${stats.total_in}`);
        console.log(`   ‚¨ÖÔ∏è  Timbrature OUT: ${stats.total_out}`);
        console.log(`   üî® Timbrature forzate: ${stats.total_forced}`);
        console.log(`   üìä Rapporto IN/OUT: ${(stats.total_in / stats.total_out).toFixed(2)}`);

        const balance = stats.total_in - stats.total_out;
        if (balance === 0) {
          console.log('\n   ‚úÖ Database bilanciato: IN = OUT');
        } else if (balance > 0) {
          console.log(`\n   ‚ö†Ô∏è  ${balance} dipendenti attualmente IN servizio`);
        } else {
          console.log(`\n   ‚ùå ERRORE: Pi√π OUT che IN (${Math.abs(balance)} record)`);
        }

        // 5. Conclusione
        console.log('\n' + '='.repeat(60));
        
        if (totalErrors === 0 && chronoErrors.length === 0) {
          console.log('\n‚úÖ VERIFICA COMPLETATA: Database integro e corretto\n');
          console.log('   I calcoli delle ore lavorate risulteranno corretti.\n');
        } else {
          console.log('\n‚ö†Ô∏è  VERIFICA COMPLETATA: Rilevate anomalie\n');
          console.log('   Raccomandazioni:');
          console.log('   1. Verificare manualmente i record segnalati');
          console.log('   2. Correggere le anomalie prima di generare report');
          console.log('   3. Considerare backup del database\n');
        }

        // Chiudi connessione
        db.close((err) => {
          if (err) {
            console.error('Errore chiusura DB:', err.message);
          }
          process.exit(totalErrors === 0 && chronoErrors.length === 0 ? 0 : 1);
        });
      });
    });
  });
});
